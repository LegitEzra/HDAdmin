{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HD Admin Docs \u00b6 Coming soon","title":"Test"},{"location":"#welcome-to-hd-admin-docs","text":"Coming soon","title":"Welcome to HD Admin Docs"},{"location":"about/","text":"Coming soon \u00b6 Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Modules"},{"location":"about/#coming-soon","text":"Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Coming soon"},{"location":"projects/datastoreplus/about/","text":"DataStore+ \u00b6 Coming soon","title":"About"},{"location":"projects/datastoreplus/about/#datastore","text":"Coming soon","title":"DataStore+"},{"location":"projects/datastoreplus/tablemodifiers/","text":"DataStore+ \u00b6","title":"TableModifiers"},{"location":"projects/datastoreplus/tablemodifiers/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/user/","text":"DataStore+ \u00b6","title":"User"},{"location":"projects/datastoreplus/user/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/userservice/","text":"DataStore+ \u00b6","title":"UserService"},{"location":"projects/datastoreplus/userservice/#datastore","text":"","title":"DataStore+"},{"location":"projects/topbarplus/about/","text":"Topbar+ is a lightweight application that expands upon Roblox's topbar to give you greater control and customisability. Create additional icons and themes with ease; utilise a once underused space. Resources \u00b6 Repository MainModule Playground Thread Collaborate \u00b6 Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository. Referencing \u00b6 After requiring the MainModule, Topbar+ modules can be referenced on the client under the HDAdmin directory in ReplicatedStorage. Location Pathway Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Topbar+\") Example \u00b6 In a server script: require ( 4874365424 ) -- Initiate Topbar+ In a local script: -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create a shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) gui . ResetOnSpawn = false local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . AnchorPoint = Vector2 . new ( 0.5 , 0.5 ) shop . Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification Themes \u00b6 Themes are easily adaptable tables of information that can be applied to icons to ehance their appearance and behaviour. You can break down a theme into three sections: The appearance of the icon when 'selected' (i.e. objectName.selected ) The appearance of the icon when 'deselected' (i.e. objectName.deselected ) How the icon transitions between these appearances when toggled (i.e. toggleTweenInfo ) An 'object' is simply a gui component that makes up the icon, such as the icons background (an ImageButton), its image (an ImageLabel), its notification background, etc. You can view the names and description of these here . For example, to make an icon have a blue background, we simply say 'I want the icon to look blue (i.e. Color3.fromRGB(0, 170, 255) ) when it's selected and deselected': [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, If a property is not specified for a 'toggle state' (i.e. the selected and deselected dictionaries), then it's automatically filled in with the default topbar properties. You then apply this theme by doing: icon : setTheme ( theme ) A theme can also be applied to all icons at once by doing: local icons = iconController : getAllIcons () for _ , icon in pairs ( icons ) do icon : setTheme ( theme ) end For further details, visit the Icon docs. Here's some examples of custom themes you can create: Roblox-mimic local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, } Soft blue local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.3 , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageTransparency = 1 , }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, } Rainbow pop local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"About"},{"location":"projects/topbarplus/about/#resources","text":"Repository MainModule Playground Thread","title":"Resources"},{"location":"projects/topbarplus/about/#collaborate","text":"Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository.","title":"Collaborate"},{"location":"projects/topbarplus/about/#referencing","text":"After requiring the MainModule, Topbar+ modules can be referenced on the client under the HDAdmin directory in ReplicatedStorage. Location Pathway Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Topbar+\")","title":"Referencing"},{"location":"projects/topbarplus/about/#example","text":"In a server script: require ( 4874365424 ) -- Initiate Topbar+ In a local script: -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create a shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) gui . ResetOnSpawn = false local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . AnchorPoint = Vector2 . new ( 0.5 , 0.5 ) shop . Position = UDim2 . new ( 0.5 , 0 , 0.5 , 0 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification","title":"Example"},{"location":"projects/topbarplus/about/#themes","text":"Themes are easily adaptable tables of information that can be applied to icons to ehance their appearance and behaviour. You can break down a theme into three sections: The appearance of the icon when 'selected' (i.e. objectName.selected ) The appearance of the icon when 'deselected' (i.e. objectName.deselected ) How the icon transitions between these appearances when toggled (i.e. toggleTweenInfo ) An 'object' is simply a gui component that makes up the icon, such as the icons background (an ImageButton), its image (an ImageLabel), its notification background, etc. You can view the names and description of these here . For example, to make an icon have a blue background, we simply say 'I want the icon to look blue (i.e. Color3.fromRGB(0, 170, 255) ) when it's selected and deselected': [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, If a property is not specified for a 'toggle state' (i.e. the selected and deselected dictionaries), then it's automatically filled in with the default topbar properties. You then apply this theme by doing: icon : setTheme ( theme ) A theme can also be applied to all icons at once by doing: local icons = iconController : getAllIcons () for _ , icon in pairs ( icons ) do icon : setTheme ( theme ) end For further details, visit the Icon docs. Here's some examples of custom themes you can create: Roblox-mimic local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, } Soft blue local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.3 , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageTransparency = 1 , }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, } Rainbow pop local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"Themes"},{"location":"projects/topbarplus/icon/","text":"Constructors \u00b6 new \u00b6 Icon . new ( name , imageId , order ) Constructs a new icon where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons. Methods \u00b6 setImage \u00b6 Icon : setImage ( imageId ) Sets the icons image, where imageId can be an int representing an asset id (such as 4882428756 ), or a string representing an assets pathway (such as \"rbxasset://textures/ui/TopBar/chatOff.png\" ). setOrder \u00b6 Icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons. setImageSize \u00b6 Icon : setImageSize ( width , height ) Sets the image size in pixels. Height will equal width if not specified. setEnabled \u00b6 Icon : setEnabled ( bool ) Sets the icons visibility. setToggleMenu \u00b6 Icon : setToggleMenu ( guiObject ) Info You must ensure the GuiObject has 'ResetOnSpawn' set to false , or that you are calling Icon:setToggleMenu(guiObject) every time the player respawns, for the menu to persist. setToggleFunction \u00b6 Icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the icon is selected and deselected. setHoverFunction \u00b6 Icon : setHoverFunction ( hoverFunction ) Warning This method is likely to change. It's recommended not to use for the time being. setTheme \u00b6 Icon : setTheme ( themeDetails ) Applies the specified theme to the icon. See Icon.theme for details on creating a theme. select \u00b6 Icon : select () Selects the icon. deselect \u00b6 Icon : deselect () Deselects the icon. notify \u00b6 Icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to Icon.deselected . clearNotifications \u00b6 Icon : clearNotifications () Clears all notifications. destroy \u00b6 Icon : destroy () Destroys all instances, connections and signals associcated with the icon. Events \u00b6 updated \u00b6 Icon . updated Fired when the icon causes a position shift of other icons. Icon . updated : Connect ( function () end ) selected \u00b6 Icon . selected Fired when the icon is selected. Icon . selected : Connect ( function () end ) deselected \u00b6 Icon . deselected Fired when the icon is deselected. Icon . deselected : Connect ( function () end ) endNotifications \u00b6 Icon . endNotifications Fired when the icons notifcations are cleared. Icon . endNotifications : Connect ( function () end ) Properties \u00b6 objects \u00b6 Icon . objects A dictionary of instances that make up the icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text. theme \u00b6 (read only) Icon . theme A dictionary describing the icons theme. To change, use Icon:setTheme() . Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } toggleStatus \u00b6 (read only) Icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". To change, use Icon:select() and Icon:deselect() . name \u00b6 (read only) Icon . name The icon creation name. imageId \u00b6 (read only) Icon . imageId The icons imageId. To change, use Icon:setImage() . imageSize \u00b6 (read only) Icon . imageSize A Vector2 representing the images size. To change, use Icon:setImageSize() . order \u00b6 (read only) Icon . order The icons order. This determines whether the icon comes before or after other icons. Defaults to 1 . To change, use Icon:setOrder() . enabled \u00b6 (read only) Icon . order A bool describing whether the icon is enabled or not. To change, use Icon:setEnabled() . totalNotifications \u00b6 (read only) Icon . totalNotifications An int representing the amount of active notifications. toggleMenu \u00b6 (read only) Icon . toggleFunction A GuiObject binded by Icon:setToggleMenu() . toggleFunction \u00b6 (read only) Icon . toggleFunction A custom function called during Icon:select() and Icon:deselect() . To change, use Icon:setToggleFunction() . hoverFunction \u00b6 (read only) Icon . hoverFunction A custom function called when the icon is (un)highlighted. To change, use Icon:setHoverFunction() . deselectWhenOtherIconSelected \u00b6 Icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true .","title":"Icon"},{"location":"projects/topbarplus/icon/#constructors","text":"","title":"Constructors"},{"location":"projects/topbarplus/icon/#new","text":"Icon . new ( name , imageId , order ) Constructs a new icon where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons.","title":"new"},{"location":"projects/topbarplus/icon/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/icon/#setimage","text":"Icon : setImage ( imageId ) Sets the icons image, where imageId can be an int representing an asset id (such as 4882428756 ), or a string representing an assets pathway (such as \"rbxasset://textures/ui/TopBar/chatOff.png\" ).","title":"setImage"},{"location":"projects/topbarplus/icon/#setorder","text":"Icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons.","title":"setOrder"},{"location":"projects/topbarplus/icon/#setimagesize","text":"Icon : setImageSize ( width , height ) Sets the image size in pixels. Height will equal width if not specified.","title":"setImageSize"},{"location":"projects/topbarplus/icon/#setenabled","text":"Icon : setEnabled ( bool ) Sets the icons visibility.","title":"setEnabled"},{"location":"projects/topbarplus/icon/#settogglemenu","text":"Icon : setToggleMenu ( guiObject ) Info You must ensure the GuiObject has 'ResetOnSpawn' set to false , or that you are calling Icon:setToggleMenu(guiObject) every time the player respawns, for the menu to persist.","title":"setToggleMenu"},{"location":"projects/topbarplus/icon/#settogglefunction","text":"Icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the icon is selected and deselected.","title":"setToggleFunction"},{"location":"projects/topbarplus/icon/#sethoverfunction","text":"Icon : setHoverFunction ( hoverFunction ) Warning This method is likely to change. It's recommended not to use for the time being.","title":"setHoverFunction"},{"location":"projects/topbarplus/icon/#settheme","text":"Icon : setTheme ( themeDetails ) Applies the specified theme to the icon. See Icon.theme for details on creating a theme.","title":"setTheme"},{"location":"projects/topbarplus/icon/#select","text":"Icon : select () Selects the icon.","title":"select"},{"location":"projects/topbarplus/icon/#deselect","text":"Icon : deselect () Deselects the icon.","title":"deselect"},{"location":"projects/topbarplus/icon/#notify","text":"Icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to Icon.deselected .","title":"notify"},{"location":"projects/topbarplus/icon/#clearnotifications","text":"Icon : clearNotifications () Clears all notifications.","title":"clearNotifications"},{"location":"projects/topbarplus/icon/#destroy","text":"Icon : destroy () Destroys all instances, connections and signals associcated with the icon.","title":"destroy"},{"location":"projects/topbarplus/icon/#events","text":"","title":"Events"},{"location":"projects/topbarplus/icon/#updated","text":"Icon . updated Fired when the icon causes a position shift of other icons. Icon . updated : Connect ( function () end )","title":"updated"},{"location":"projects/topbarplus/icon/#selected","text":"Icon . selected Fired when the icon is selected. Icon . selected : Connect ( function () end )","title":"selected"},{"location":"projects/topbarplus/icon/#deselected","text":"Icon . deselected Fired when the icon is deselected. Icon . deselected : Connect ( function () end )","title":"deselected"},{"location":"projects/topbarplus/icon/#endnotifications","text":"Icon . endNotifications Fired when the icons notifcations are cleared. Icon . endNotifications : Connect ( function () end )","title":"endNotifications"},{"location":"projects/topbarplus/icon/#properties","text":"","title":"Properties"},{"location":"projects/topbarplus/icon/#objects","text":"Icon . objects A dictionary of instances that make up the icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text.","title":"objects"},{"location":"projects/topbarplus/icon/#theme","text":"(read only) Icon . theme A dictionary describing the icons theme. To change, use Icon:setTheme() . Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, }","title":"theme"},{"location":"projects/topbarplus/icon/#togglestatus","text":"(read only) Icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". To change, use Icon:select() and Icon:deselect() .","title":"toggleStatus"},{"location":"projects/topbarplus/icon/#name","text":"(read only) Icon . name The icon creation name.","title":"name"},{"location":"projects/topbarplus/icon/#imageid","text":"(read only) Icon . imageId The icons imageId. To change, use Icon:setImage() .","title":"imageId"},{"location":"projects/topbarplus/icon/#imagesize","text":"(read only) Icon . imageSize A Vector2 representing the images size. To change, use Icon:setImageSize() .","title":"imageSize"},{"location":"projects/topbarplus/icon/#order","text":"(read only) Icon . order The icons order. This determines whether the icon comes before or after other icons. Defaults to 1 . To change, use Icon:setOrder() .","title":"order"},{"location":"projects/topbarplus/icon/#enabled","text":"(read only) Icon . order A bool describing whether the icon is enabled or not. To change, use Icon:setEnabled() .","title":"enabled"},{"location":"projects/topbarplus/icon/#totalnotifications","text":"(read only) Icon . totalNotifications An int representing the amount of active notifications.","title":"totalNotifications"},{"location":"projects/topbarplus/icon/#togglemenu","text":"(read only) Icon . toggleFunction A GuiObject binded by Icon:setToggleMenu() .","title":"toggleMenu"},{"location":"projects/topbarplus/icon/#togglefunction","text":"(read only) Icon . toggleFunction A custom function called during Icon:select() and Icon:deselect() . To change, use Icon:setToggleFunction() .","title":"toggleFunction"},{"location":"projects/topbarplus/icon/#hoverfunction","text":"(read only) Icon . hoverFunction A custom function called when the icon is (un)highlighted. To change, use Icon:setHoverFunction() .","title":"hoverFunction"},{"location":"projects/topbarplus/icon/#deselectwhenothericonselected","text":"Icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected. Defaults to true .","title":"deselectWhenOtherIconSelected"},{"location":"projects/topbarplus/iconcontroller/","text":"Methods \u00b6 createIcon \u00b6 IconController : createIcon ( name , imageId , order ) Creates, stores and returns an icon, where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons, greater values being shifted rightward. createFakeChat \u00b6 IconController : createFakeChat ( theme ) Disables the default core chat icon, and creates and returns a new icon imitating it. getIcon \u00b6 IconController : getIcon ( name ) Returns an icon of the corresponding name. getAllIcons \u00b6 IconController : getAllIcons () Returns an array containing every icon. removeIcon \u00b6 IconController : removeIcon ( name ) Destroys and removes references of the corresponding icon.","title":"IconController"},{"location":"projects/topbarplus/iconcontroller/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/iconcontroller/#createicon","text":"IconController : createIcon ( name , imageId , order ) Creates, stores and returns an icon, where name is a unique string identifying the icon, imageId an int representing the icons image, and order , a number defining how the icon should be positioned in relation to neighbouring icons, greater values being shifted rightward.","title":"createIcon"},{"location":"projects/topbarplus/iconcontroller/#createfakechat","text":"IconController : createFakeChat ( theme ) Disables the default core chat icon, and creates and returns a new icon imitating it.","title":"createFakeChat"},{"location":"projects/topbarplus/iconcontroller/#geticon","text":"IconController : getIcon ( name ) Returns an icon of the corresponding name.","title":"getIcon"},{"location":"projects/topbarplus/iconcontroller/#getallicons","text":"IconController : getAllIcons () Returns an array containing every icon.","title":"getAllIcons"},{"location":"projects/topbarplus/iconcontroller/#removeicon","text":"IconController : removeIcon ( name ) Destroys and removes references of the corresponding icon.","title":"removeIcon"},{"location":"projects/zoneplus/about/","text":"Zone+ is a lightweight application that utilises regions and raycasting to efficiently determine players within an area. Resources \u00b6 Repository MainModule Playground Thread TypeScript Port by DanzLua Collaborate \u00b6 Zone+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository. Referencing \u00b6 After requiring the MainModule, Zone+ modules can be referenced on the server and client under the HDAdmin directory in ReplicatedStorage. Location Pathway Server MainModule or ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Example (server-sided) \u00b6 On the server: local ZonePlus = require ( 4664437268 ) -- Initiate Zone+ local ZoneService = require ( ZonePlus . ZoneService ) -- Retrieve and require ZoneService local group = workspace . YourGroupHere -- A container (i.e. Model or Folder) of parts that represent the zone local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) -- Construct a zone called 'ZoneName' using 'group' and with an extended height of 15 local playersInZone = zone : getPlayers () -- Retrieves an array of players within the zone Example (client-sided) \u00b6 Zone+ is primarily intended for server-sided use, however also supports client use. On the server: require ( 4664437268 ) -- Initiate Zone+ On the client: local ZoneService = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Zone+\" ). ZoneService ) local group = workspace . YourGroupHere local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) local playersInZone = zone : getPlayers () Uses \u00b6 For coded examples, visit the Zone+ Playground. Safe Zone (1) \u00b6 Setup a zone with an arbitrary space (using the additionalHeight parameter), retrieve all players within the zone at frequent intervals, and apply or remove a forcefield accordingly. This example also generates 2000 random parts as a visual representation of additionalHeight . Safe Zone (2) \u00b6 Detect and apply a forcefield to players within an uncancollided red zone using the playerAdded and playerRemoving events. Coin Spawner \u00b6 Randomly generate coins a few studs above any surface within the zone. Voting Pads \u00b6 Utilise zones to determine the amount of players on a particular pad.","title":"About"},{"location":"projects/zoneplus/about/#resources","text":"Repository MainModule Playground Thread TypeScript Port by DanzLua","title":"Resources"},{"location":"projects/zoneplus/about/#collaborate","text":"Zone+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository.","title":"Collaborate"},{"location":"projects/zoneplus/about/#referencing","text":"After requiring the MainModule, Zone+ modules can be referenced on the server and client under the HDAdmin directory in ReplicatedStorage. Location Pathway Server MainModule or ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\")","title":"Referencing"},{"location":"projects/zoneplus/about/#example-server-sided","text":"On the server: local ZonePlus = require ( 4664437268 ) -- Initiate Zone+ local ZoneService = require ( ZonePlus . ZoneService ) -- Retrieve and require ZoneService local group = workspace . YourGroupHere -- A container (i.e. Model or Folder) of parts that represent the zone local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) -- Construct a zone called 'ZoneName' using 'group' and with an extended height of 15 local playersInZone = zone : getPlayers () -- Retrieves an array of players within the zone","title":"Example (server-sided)"},{"location":"projects/zoneplus/about/#example-client-sided","text":"Zone+ is primarily intended for server-sided use, however also supports client use. On the server: require ( 4664437268 ) -- Initiate Zone+ On the client: local ZoneService = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Zone+\" ). ZoneService ) local group = workspace . YourGroupHere local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) local playersInZone = zone : getPlayers ()","title":"Example (client-sided)"},{"location":"projects/zoneplus/about/#uses","text":"For coded examples, visit the Zone+ Playground.","title":"Uses"},{"location":"projects/zoneplus/about/#safe-zone-1","text":"Setup a zone with an arbitrary space (using the additionalHeight parameter), retrieve all players within the zone at frequent intervals, and apply or remove a forcefield accordingly. This example also generates 2000 random parts as a visual representation of additionalHeight .","title":"Safe Zone (1)"},{"location":"projects/zoneplus/about/#safe-zone-2","text":"Detect and apply a forcefield to players within an uncancollided red zone using the playerAdded and playerRemoving events.","title":"Safe Zone (2)"},{"location":"projects/zoneplus/about/#coin-spawner","text":"Randomly generate coins a few studs above any surface within the zone.","title":"Coin Spawner"},{"location":"projects/zoneplus/about/#voting-pads","text":"Utilise zones to determine the amount of players on a particular pad.","title":"Voting Pads"},{"location":"projects/zoneplus/zone/","text":"Constructors \u00b6 new \u00b6 Zone . new ( group , additionalHeight ) Constructs a new zone where group is an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 . Methods \u00b6 update \u00b6 Zone : update () Reconstructs the region and clusters forming the zone. getPlayersInRegion \u00b6 Zone : getPlayersInRegion () Returns an array of players within the zones region (the rough area surrounding the zone). getPlayer \u00b6 Zone : getPlayer ( player ) Returns the group part the player is standing on or within if in the zone, otherwise false . getPlayers \u00b6 Zone : getPlayers () Returns an array of players within the zone. initLoop \u00b6 Zone : initLoop ( interval ) Automatically initiates a loop which calls Zone:getPlayers() every x second, defaults to 0.5 . endLoop \u00b6 Zone : endLoop () Cancels any loop created with Zone:initLoop() . getRandomPoint \u00b6 Zone : getRandomPoint () Returns a random point, a CFrame value, within the zone, along with the group part directly below, and its intersection vector relative to the point. local randomCFrame, hitPart, hitIntersection = zone:getRandomPoint() destroy \u00b6 Zone : destroy () Destroys all instances, connections and signals associcated with the zone, and ends any loop running. Events \u00b6 playerAdded \u00b6 Zone . playerAdded Fired when a player enters the zone. Info Zone:getPlayers() must be called at frequent intervals, or Zone:initLoop() once (which calls this repeatedly), for this event to function. Zone . playerAdded : Connect ( function ( player ) end ) playerRemoving \u00b6 Zone . playerRemoving Fired when a player leaves the zone. Info Zone:getPlayers() must be called at frequent intervals, or Zone:initLoop() once (which calls this repeatedly), for this event to function. Zone . playerRemoving : Connect ( function ( player ) end ) updated \u00b6 Zone . updated Fired when the zone updates (i.e. a group part is changed, such as its position or size, or a part is added or removed from the group). Zone . updated : Connect ( function () end ) Properties \u00b6 autoUpdate \u00b6 Zone . autoUpdate A bool deciding whether the zone should automatically update when its group parts change. respectUpdateQueue \u00b6 Zone . respectUpdateQueue A bool that when set to true delays the automatic updating of the zone, preventing multiple calls within a short time period. group \u00b6 (read only) Zone . group The container instance originally passed when constructing the zone. groupParts \u00b6 (read only) Zone . groupParts An array of all BaseParts within group . clusters \u00b6 (read only) Zone . clusters An array of clusters. Cluster A dictionary describing a collection of touching parts within the zone. Key Value Desc parts Array A collection of touching parts that form the cluster region Region3 A region formed from the clusters parts. volume Number The volume calculated from region.Size additionalHeight \u00b6 (read only) Zone . additionalHeight The number originally passed when constructing the zone, or 0. Describes how far to extend the zone in the global Y direction. region \u00b6 (read only) Zone . region A Region3 formed from groupParts . boundMin \u00b6 (read only) Zone . boundMin A Vector3 used to form region , describing the zones minimum point. boundMax \u00b6 (read only) Zone . boundMax A Vector3 used to form region , describing the zones maximum point. regionHeight \u00b6 (read only) Zone . regionHeight A number describing the Y-value difference between boundMin and boundMax .","title":"Zone"},{"location":"projects/zoneplus/zone/#constructors","text":"","title":"Constructors"},{"location":"projects/zoneplus/zone/#new","text":"Zone . new ( group , additionalHeight ) Constructs a new zone where group is an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 .","title":"new"},{"location":"projects/zoneplus/zone/#methods","text":"","title":"Methods"},{"location":"projects/zoneplus/zone/#update","text":"Zone : update () Reconstructs the region and clusters forming the zone.","title":"update"},{"location":"projects/zoneplus/zone/#getplayersinregion","text":"Zone : getPlayersInRegion () Returns an array of players within the zones region (the rough area surrounding the zone).","title":"getPlayersInRegion"},{"location":"projects/zoneplus/zone/#getplayer","text":"Zone : getPlayer ( player ) Returns the group part the player is standing on or within if in the zone, otherwise false .","title":"getPlayer"},{"location":"projects/zoneplus/zone/#getplayers","text":"Zone : getPlayers () Returns an array of players within the zone.","title":"getPlayers"},{"location":"projects/zoneplus/zone/#initloop","text":"Zone : initLoop ( interval ) Automatically initiates a loop which calls Zone:getPlayers() every x second, defaults to 0.5 .","title":"initLoop"},{"location":"projects/zoneplus/zone/#endloop","text":"Zone : endLoop () Cancels any loop created with Zone:initLoop() .","title":"endLoop"},{"location":"projects/zoneplus/zone/#getrandompoint","text":"Zone : getRandomPoint () Returns a random point, a CFrame value, within the zone, along with the group part directly below, and its intersection vector relative to the point. local randomCFrame, hitPart, hitIntersection = zone:getRandomPoint()","title":"getRandomPoint"},{"location":"projects/zoneplus/zone/#destroy","text":"Zone : destroy () Destroys all instances, connections and signals associcated with the zone, and ends any loop running.","title":"destroy"},{"location":"projects/zoneplus/zone/#events","text":"","title":"Events"},{"location":"projects/zoneplus/zone/#playeradded","text":"Zone . playerAdded Fired when a player enters the zone. Info Zone:getPlayers() must be called at frequent intervals, or Zone:initLoop() once (which calls this repeatedly), for this event to function. Zone . playerAdded : Connect ( function ( player ) end )","title":"playerAdded"},{"location":"projects/zoneplus/zone/#playerremoving","text":"Zone . playerRemoving Fired when a player leaves the zone. Info Zone:getPlayers() must be called at frequent intervals, or Zone:initLoop() once (which calls this repeatedly), for this event to function. Zone . playerRemoving : Connect ( function ( player ) end )","title":"playerRemoving"},{"location":"projects/zoneplus/zone/#updated","text":"Zone . updated Fired when the zone updates (i.e. a group part is changed, such as its position or size, or a part is added or removed from the group). Zone . updated : Connect ( function () end )","title":"updated"},{"location":"projects/zoneplus/zone/#properties","text":"","title":"Properties"},{"location":"projects/zoneplus/zone/#autoupdate","text":"Zone . autoUpdate A bool deciding whether the zone should automatically update when its group parts change.","title":"autoUpdate"},{"location":"projects/zoneplus/zone/#respectupdatequeue","text":"Zone . respectUpdateQueue A bool that when set to true delays the automatic updating of the zone, preventing multiple calls within a short time period.","title":"respectUpdateQueue"},{"location":"projects/zoneplus/zone/#group","text":"(read only) Zone . group The container instance originally passed when constructing the zone.","title":"group"},{"location":"projects/zoneplus/zone/#groupparts","text":"(read only) Zone . groupParts An array of all BaseParts within group .","title":"groupParts"},{"location":"projects/zoneplus/zone/#clusters","text":"(read only) Zone . clusters An array of clusters. Cluster A dictionary describing a collection of touching parts within the zone. Key Value Desc parts Array A collection of touching parts that form the cluster region Region3 A region formed from the clusters parts. volume Number The volume calculated from region.Size","title":"clusters"},{"location":"projects/zoneplus/zone/#additionalheight","text":"(read only) Zone . additionalHeight The number originally passed when constructing the zone, or 0. Describes how far to extend the zone in the global Y direction.","title":"additionalHeight"},{"location":"projects/zoneplus/zone/#region","text":"(read only) Zone . region A Region3 formed from groupParts .","title":"region"},{"location":"projects/zoneplus/zone/#boundmin","text":"(read only) Zone . boundMin A Vector3 used to form region , describing the zones minimum point.","title":"boundMin"},{"location":"projects/zoneplus/zone/#boundmax","text":"(read only) Zone . boundMax A Vector3 used to form region , describing the zones maximum point.","title":"boundMax"},{"location":"projects/zoneplus/zone/#regionheight","text":"(read only) Zone . regionHeight A number describing the Y-value difference between boundMin and boundMax .","title":"regionHeight"},{"location":"projects/zoneplus/zoneservice/","text":"Methods \u00b6 createZone \u00b6 ZoneService : createZone ( name , group , additionalHeight ) Creates, stores and returns a zone, where name is a unique string identifying the zone, group , an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 . getZone \u00b6 ZoneService : getZone ( name ) Returns a zone of the corresponding name. getAllZones \u00b6 ZoneService : getAllZones () Returns an array containing every zone. removeZone \u00b6 ZoneService : removeZone ( name ) Destroys and removes references of the corresponding zone.","title":"ZoneService"},{"location":"projects/zoneplus/zoneservice/#methods","text":"","title":"Methods"},{"location":"projects/zoneplus/zoneservice/#createzone","text":"ZoneService : createZone ( name , group , additionalHeight ) Creates, stores and returns a zone, where name is a unique string identifying the zone, group , an instance (such as a Model or Folder) containing parts to represent the zone, and additionalHeight , a number defining how many studs to extend the zone upwards, defaulting to 0 .","title":"createZone"},{"location":"projects/zoneplus/zoneservice/#getzone","text":"ZoneService : getZone ( name ) Returns a zone of the corresponding name.","title":"getZone"},{"location":"projects/zoneplus/zoneservice/#getallzones","text":"ZoneService : getAllZones () Returns an array containing every zone.","title":"getAllZones"},{"location":"projects/zoneplus/zoneservice/#removezone","text":"ZoneService : removeZone ( name ) Destroys and removes references of the corresponding zone.","title":"removeZone"}]}